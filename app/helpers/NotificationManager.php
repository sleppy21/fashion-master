<?php
/**
 * SISTEMA DE NOTIFICACIONES AUTOM√ÅTICAS
 * 
 * Este archivo maneja todas las notificaciones autom√°ticas del sistema
 * Similar a Temu, Amazon, etc.
 * 
 * Tipos de notificaciones implementadas:
 * - Bienvenida (nuevo usuario)
 * - Confirmaci√≥n de pedido
 * - Pedido en camino
 * - Pedido entregado
 * - Cambio de estado de pedido
 * - Producto de vuelta en stock
 * - Descuento en favoritos
 * - Recordatorio de carrito abandonado
 * - Puntos de recompensa
 * - Cambios de contrase√±a
 * - Nuevos productos similares
 * - Ofertas especiales
 */

class NotificationManager {
    private $conn;
    
    public function __construct($connection) {
        $this->conn = $connection;
    }
    
    /**
     * Crear una notificaci√≥n gen√©rica
     */
    private function createNotification($id_usuario, $titulo, $mensaje, $tipo = 'info', $prioridad = 'media', $url_destino = null) {
        try {
            $query = "INSERT INTO notificacion 
                      (id_usuario, titulo_notificacion, mensaje_notificacion, tipo_notificacion, 
                       prioridad_notificacion, url_destino_notificacion, leida_notificacion, 
                       fecha_creacion_notificacion, estado_notificacion) 
                      VALUES (?, ?, ?, ?, ?, ?, 0, NOW(), 'activo')";
            
            $stmt = $this->conn->prepare($query);
            $stmt->execute([$id_usuario, $titulo, $mensaje, $tipo, $prioridad, $url_destino]);
            
            return $stmt->rowCount() > 0;
        } catch (Exception $e) {
            error_log("Error al crear notificaci√≥n: " . $e->getMessage());
            return false;
        }
    }
    
    // ==========================================
    // NOTIFICACIONES DE USUARIO
    // ==========================================
    
    /**
     * Notificaci√≥n de bienvenida para nuevos usuarios
     */
    public function notifyWelcome($id_usuario, $nombre_usuario) {
        $titulo = "üéâ ¬°Bienvenido a SleppyStore!";
        $mensaje = "¬°Hola {$nombre_usuario}! Gracias por unirte a nuestra familia. Explora nuestros productos y aprovecha las ofertas especiales para nuevos usuarios.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', 'shop.php');
    }
    
    /**
     * Notificaci√≥n de primer inicio de sesi√≥n
     */
    public function notifyFirstLogin($id_usuario, $nombre_usuario) {
        $titulo = "üëã ¬°Bienvenido de vuelta, {$nombre_usuario}!";
        $mensaje = "Es tu primer inicio de sesi√≥n. Te recomendamos explorar nuestras categor√≠as y agregar productos a tus favoritos.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'baja', 'shop.php');
    }
    
    /**
     * Notificaci√≥n de bienvenida en cada login (como Temu/Amazon)
     */
    public function notifyWelcomeBack($id_usuario, $nombre_usuario) {
        $hora = date('H');
        $saludo = ($hora < 12) ? "Buenos d√≠as" : (($hora < 20) ? "Buenas tardes" : "Buenas noches");
        
        $titulo = "üëã {$saludo}, {$nombre_usuario}!";
        $mensaje = "¬°Nos alegra verte de nuevo! Descubre las novedades y ofertas especiales que tenemos para ti.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'baja', 'shop.php');
    }
    
    /**
     * Notificaci√≥n de cambio de contrase√±a
     */
    public function notifyPasswordChanged($id_usuario) {
        $titulo = "üîê Contrase√±a actualizada";
        $mensaje = "Tu contrase√±a ha sido cambiada exitosamente. Si no realizaste este cambio, por favor contacta con soporte inmediatamente.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'alerta', 'alta', 'change-password.php');
    }
    
    /**
     * Notificaci√≥n de inicio de sesi√≥n desde nuevo dispositivo
     */
    public function notifyNewDeviceLogin($id_usuario, $dispositivo, $ubicacion = 'Ubicaci√≥n desconocida') {
        $titulo = "üîê Nuevo inicio de sesi√≥n detectado";
        $mensaje = "Se ha detectado un inicio de sesi√≥n desde {$dispositivo} en {$ubicacion}. Si no fuiste t√∫, cambia tu contrase√±a inmediatamente.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'alerta', 'alta', 'change-password.php');
    }
    
    // ==========================================
    // NOTIFICACIONES DE PEDIDOS
    // ==========================================
    
    /**
     * Notificaci√≥n de pedido confirmado
     */
    public function notifyOrderConfirmed($id_usuario, $id_pedido, $total) {
        $titulo = "‚úÖ Pedido confirmado #" . str_pad($id_pedido, 5, '0', STR_PAD_LEFT);
        $mensaje = "Tu pedido por \$" . number_format($total, 2) . " ha sido confirmado. Estamos preparando tu env√≠o.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', 'order-confirmation.php?id=' . $id_pedido);
    }
    
    /**
     * Notificaci√≥n de pedido en proceso
     */
    public function notifyOrderProcessing($id_usuario, $id_pedido) {
        $titulo = "üì¶ Preparando tu pedido #" . str_pad($id_pedido, 5, '0', STR_PAD_LEFT);
        $mensaje = "Tu pedido est√° siendo preparado para el env√≠o. Te notificaremos cuando salga de nuestro almac√©n.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', 'order-confirmation.php?id=' . $id_pedido);
    }
    
    /**
     * Notificaci√≥n de pedido enviado
     */
    public function notifyOrderShipped($id_usuario, $id_pedido, $numero_seguimiento = null) {
        $titulo = "üöö Pedido en camino #" . str_pad($id_pedido, 5, '0', STR_PAD_LEFT);
        $mensaje = "¬°Tu pedido ya est√° en camino! ";
        
        if ($numero_seguimiento) {
            $mensaje .= "N√∫mero de seguimiento: {$numero_seguimiento}. ";
        }
        
        $mensaje .= "Llegar√° en 2-3 d√≠as h√°biles.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'alta', 'order-confirmation.php?id=' . $id_pedido);
    }
    
    /**
     * Notificaci√≥n de pedido entregado
     */
    public function notifyOrderDelivered($id_usuario, $id_pedido) {
        $titulo = "üéâ Pedido entregado #" . str_pad($id_pedido, 5, '0', STR_PAD_LEFT);
        $mensaje = "Tu pedido ha sido entregado. Esperamos que disfrutes tus productos. ¬øQu√© te parecieron? D√©janos tu opini√≥n.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', 'order-confirmation.php?id=' . $id_pedido);
    }
    
    /**
     * Notificaci√≥n de pedido cancelado
     */
    public function notifyOrderCancelled($id_usuario, $id_pedido, $motivo = '') {
        $titulo = "‚ùå Pedido cancelado #" . str_pad($id_pedido, 5, '0', STR_PAD_LEFT);
        $mensaje = "Tu pedido ha sido cancelado. ";
        
        if ($motivo) {
            $mensaje .= "Motivo: {$motivo}. ";
        }
        
        $mensaje .= "Si tienes dudas, cont√°ctanos.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'advertencia', 'alta', null);
    }
    
    // ==========================================
    // NOTIFICACIONES DE PRODUCTOS
    // ==========================================
    
    /**
     * Notificaci√≥n de producto de vuelta en stock
     */
    public function notifyProductBackInStock($id_usuario, $id_producto, $nombre_producto) {
        $titulo = "üéØ ¬°De vuelta en stock!";
        $mensaje = "El producto '{$nombre_producto}' que te interesa est√° nuevamente disponible. ¬°Aprovecha antes de que se agote!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'alta', 'product-details.php?id=' . $id_producto);
    }
    
    /**
     * Notificaci√≥n de descuento en favoritos
     */
    public function notifyFavoriteOnSale($id_usuario, $id_producto, $nombre_producto, $descuento) {
        $titulo = "üî• ¬°Descuento en tus favoritos!";
        $mensaje = "El producto '{$nombre_producto}' ahora tiene {$descuento}% de descuento. ¬°No te lo pierdas!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'alta', 'product-details.php?id=' . $id_producto);
    }
    
    /**
     * Notificaci√≥n de stock bajo en favoritos
     */
    public function notifyFavoriteLowStock($id_usuario, $id_producto, $nombre_producto, $stock) {
        $titulo = "‚ö†Ô∏è Stock limitado en favoritos";
        $mensaje = "Quedan solo {$stock} unidades del producto '{$nombre_producto}'. ¬°Compra antes de que se agote!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'alerta', 'alta', 'product-details.php?id=' . $id_producto);
    }
    
    /**
     * Notificaci√≥n de nuevos productos similares
     */
    public function notifyNewSimilarProducts($id_usuario, $categoria) {
        $titulo = "‚ú® Nuevos productos para ti";
        $mensaje = "Hemos agregado nuevos productos en {$categoria} que podr√≠an interesarte. ¬°√âchales un vistazo!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'baja', 'shop.php');
    }
    
    // ==========================================
    // NOTIFICACIONES DE CARRITO
    // ==========================================
    
    /**
     * Notificaci√≥n de carrito abandonado
     */
    public function notifyAbandonedCart($id_usuario, $cantidad_productos, $total) {
        $titulo = "üõí ¬°Tienes productos en tu carrito!";
        $mensaje = "Tienes {$cantidad_productos} producto(s) esper√°ndote por \$" . number_format($total, 2) . ". Completa tu compra y recibe un descuento especial.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', 'cart.php');
    }
    
    /**
     * Notificaci√≥n de cambio de precio en carrito
     */
    public function notifyCartPriceChange($id_usuario, $producto, $precio_anterior, $precio_nuevo) {
        $titulo = "üí∞ Cambio de precio en tu carrito";
        $mensaje = "El producto '{$producto}' cambi√≥ de \$" . number_format($precio_anterior, 2) . " a \$" . number_format($precio_nuevo, 2) . ".";
        
        $tipo = $precio_nuevo < $precio_anterior ? 'info' : 'advertencia';
        $prioridad = $precio_nuevo < $precio_anterior ? 'alta' : 'media';
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, $tipo, $prioridad, 'cart.php');
    }
    
    // ==========================================
    // NOTIFICACIONES DE PROMOCIONES
    // ==========================================
    
    /**
     * Notificaci√≥n de oferta especial personalizada
     */
    public function notifySpecialOffer($id_usuario, $descuento, $categoria = null) {
        $titulo = "üéÅ ¬°Oferta especial para ti!";
        $mensaje = "Tenemos un {$descuento}% de descuento especial";
        
        if ($categoria) {
            $mensaje .= " en productos de {$categoria}";
        }
        
        $mensaje .= " solo para ti. ¬°V√°lido por 48 horas!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'alta', 'shop.php');
    }
    
    /**
     * Notificaci√≥n de puntos de recompensa
     */
    public function notifyRewardPoints($id_usuario, $puntos, $accion = 'ganado') {
        $titulo = $accion === 'ganado' ? "üåü ¬°Has ganado puntos!" : "üéÅ Puntos canjeados";
        $mensaje = $accion === 'ganado' 
            ? "Has ganado {$puntos} puntos de recompensa. Canj√©alos por descuentos en tu pr√≥xima compra."
            : "Has canjeado {$puntos} puntos. ¬°Disfruta tu descuento!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'info', 'media', null);
    }
    
    /**
     * Notificaci√≥n de cup√≥n pr√≥ximo a vencer
     */
    public function notifyCouponExpiring($id_usuario, $codigo_cupon, $dias_restantes) {
        $titulo = "‚è∞ Tu cup√≥n est√° por vencer";
        $mensaje = "El cup√≥n '{$codigo_cupon}' vence en {$dias_restantes} d√≠a(s). ¬°√ösalo antes de que expire!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'advertencia', 'alta', 'shop.php');
    }
    
    // ==========================================
    // NOTIFICACIONES DEL SISTEMA
    // ==========================================
    
    /**
     * Notificaci√≥n de mantenimiento programado
     */
    public function notifyMaintenance($id_usuario, $fecha, $duracion) {
        $titulo = "üõ†Ô∏è Mantenimiento programado";
        $mensaje = "El sistema estar√° en mantenimiento el {$fecha} durante aproximadamente {$duracion}. Disculpa las molestias.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'sistema', 'media', null);
    }
    
    /**
     * Notificaci√≥n de actualizaci√≥n de sistema
     */
    public function notifySystemUpdate($id_usuario) {
        $titulo = "‚ö° Nueva actualizaci√≥n disponible";
        $mensaje = "Hemos mejorado la experiencia de compra con nuevas funciones y mejor rendimiento. ¬°Explora las novedades!";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'sistema', 'baja', null);
    }
    
    /**
     * Notificaci√≥n de verificaci√≥n de email
     */
    public function notifyEmailVerification($id_usuario, $email) {
        $titulo = "üìß Verifica tu correo electr√≥nico";
        $mensaje = "Por favor verifica tu correo electr√≥nico ({$email}) para activar todas las funciones de tu cuenta.";
        
        return $this->createNotification($id_usuario, $titulo, $mensaje, 'advertencia', 'media', null);
    }
    
    // ==========================================
    // NOTIFICACIONES MASIVAS
    // ==========================================
    
    /**
     * Enviar notificaci√≥n a m√∫ltiples usuarios
     */
    public function notifyMultipleUsers($ids_usuarios, $titulo, $mensaje, $tipo = 'info', $prioridad = 'media', $url_destino = null) {
        $success_count = 0;
        
        foreach ($ids_usuarios as $id_usuario) {
            if ($this->createNotification($id_usuario, $titulo, $mensaje, $tipo, $prioridad, $url_destino)) {
                $success_count++;
            }
        }
        
        return $success_count;
    }
    
    /**
     * Enviar notificaci√≥n a todos los usuarios activos
     */
    public function notifyAllUsers($titulo, $mensaje, $tipo = 'info', $prioridad = 'baja', $url_destino = null) {
        try {
            $query = "SELECT id_usuario FROM usuario WHERE status_usuario = 1";
            $stmt = $this->conn->query($query);
            $usuarios = $stmt->fetchAll(PDO::FETCH_COLUMN);
            
            return $this->notifyMultipleUsers($usuarios, $titulo, $mensaje, $tipo, $prioridad, $url_destino);
        } catch (Exception $e) {
            error_log("Error al notificar a todos los usuarios: " . $e->getMessage());
            return 0;
        }
    }
}

/**
 * Funci√≥n helper para obtener instancia del NotificationManager
 */
function getNotificationManager($conn = null) {
    if ($conn === null) {
        require_once __DIR__ . '/../config/conexion.php';
        global $conn;
    }
    return new NotificationManager($conn);
}

/**
 * EJEMPLOS DE USO:
 * 
 * // Notificaci√≥n de bienvenida
 * $nm = getNotificationManager();
 * $nm->notifyWelcome($id_usuario, $nombre_usuario);
 * 
 * // Notificaci√≥n de pedido confirmado
 * $nm->notifyOrderConfirmed($id_usuario, $id_pedido, $total);
 * 
 * // Notificaci√≥n de producto de vuelta en stock
 * $nm->notifyProductBackInStock($id_usuario, $id_producto, $nombre_producto);
 * 
 * // Notificaci√≥n de carrito abandonado
 * $nm->notifyAbandonedCart($id_usuario, $cantidad_productos, $total);
 * 
 * // Notificaci√≥n a todos los usuarios
 * $nm->notifyAllUsers("üéâ ¬°Gran promoci√≥n!", "50% de descuento...", 'info', 'alta', 'shop.php');
 */
?>
